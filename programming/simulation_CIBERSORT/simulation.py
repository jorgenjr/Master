import readline
import sys
import numpy as np
import quantile_normalisation
import noise
import file_handler
import mixtures
import copy
import argparse
import config
import linecache

parser = argparse.ArgumentParser()
parser.add_argument("-m", "--MIXTURES", help="Mixtures", nargs='*')
parser.add_argument("-t", "--TUMORS", help="Tumors", nargs='*')
parser.add_argument("-c", "--CELL_LINES", help="Cell lines", nargs='*')
parser.add_argument("-r", "--REFERENCE", help="Reference", nargs='*')
parser.add_argument("-i", "--ITERATION", help="Iteration", nargs='*')


class Simulation:
	def __init__(self):

		self.MIXTURES_INPUT = []
		self.TUMORS_INPUT = []
		self.CELL_LINES_INPUT = []


	def stdin_all(self, str_type, arg_var):

		no_cell_lines = int(input("How many " + str_type + " in " + arg_var + "? "))
		cells = linecache.getline(config.PATH_EXTERNAL + arg_var, 1).split('\t')
		cell_line_list = []
		cell_no = 1
		j = 0

		while True:

			if j == no_cell_lines:
				break

			replicates = input("How many replicates are there of " + cells[cell_no] + "? ")
			splitted_rep = replicates.split(' ')

			if splitted_rep[0].lower() == 'skip':

				if len(splitted_rep) > 1:
					cell_no += int(splitted_rep[1])
				else:
					cell_no += 1

				continue

			j += 1
			cell_line_list.append([cells[cell_no], cell_no, int(replicates)])
			cell_no += int(replicates)

		return cell_line_list


	def stdin_mixtures(self):

		if len(args.MIXTURES) == 0:
			self.print_input_req()

		print("")
		print("*** MIXTURES ***")

		for i in range(len(args.MIXTURES)):
			self.MIXTURES_INPUT.append(self.stdin_all("distinct mixtures", args.MIXTURES[i]))
			print("")


	def stdin_tumors(self):

		if len(args.TUMORS) == 0:
			self.print_input_req()

		print("")
		print("*** TUMORS ***")

		for i in range(len(args.TUMORS)):
			self.TUMORS_INPUT.append(self.stdin_all("tumor cell lines", args.TUMORS[i]))
			print("")

	def stdin_cell_lines(self):

		if len(args.CELL_LINES) == 0:
			self.print_input_req()

		print("")
		print("*** CELL LINES ***")

		for i in range(len(args.CELL_LINES)):
			self.CELL_LINES_INPUT.append(self.stdin_all("cell lines", args.CELL_LINES[i]))
			print("")

	def read_stdin(self):

		""" Reads in from keyboard. This is needed to know which part of the input files that are
		supposed to be read by the program.
		"""

		if args.MIXTURES != None:
			self.stdin_mixtures()

		if args.TUMORS != None:
			self.stdin_tumors()

		if args.CELL_LINES != None:
			self.stdin_cell_lines()

		if args.MIXTURES == None and args.TUMORS == None and args.CELL_LINES == None:
			self.print_input_req()

		print("")

	def print_input_req(self):

		print("")
		print("No arguments detected.")
		print("")
		print("python simulation.py [-m mixture.file ... ] [-t tumor.file ... ] [-c cell_lines.file] [-r true] [-i start_tumor stop_tumor interval_tumor start_noise stop_noise intveral noise]")
		print("")
		sys.exit(1)

	def execute(self):

		""" This is the function that initiates the whole simulation. There are different possibilities
		for simulation:

		1. Generate a reference file (used for signature matrix in CIBERSORT) using immune cell lines
			and tumor cell lines.
		2. Generate a pure cell lines file (used for LLSR) using immune cell lines and tumor cell lines.
		3. Generate a simulation file with spiked in tumor. This should be generated by using mixture
			files and tumor files.
		"""

		if args.CELL_LINES != None and len(args.CELL_LINES) > 0:
			if args.REFERENCE != None and len(args.REFERENCE) > 0:
				self.reference()
			else:
				self.pure_cells()

		if args.MIXTURES != None and len(args.MIXTURES) > 0:
			self.mixes()

	def reference(self):

		""" Generate a reference file (used for signature matrix in CIBERSORT) using immune cell lines
		and tumor cell lines.
		"""

		np_gene_dictionary = {}
		tumor_present = False

		if args.TUMORS != None and len(args.TUMORS) > 0:
			tumor_present = True

		np_gene_dictionary = mixtures.get_relevant_information(np_gene_dictionary, tumor_present, args.CELL_LINES,
															   self.CELL_LINES_INPUT, args.TUMORS, self.TUMORS_INPUT)

		separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)

		cell_lines_matrix = mixtures.get_separated_for_normalization(separate_values_matrix, tumor_present,
																	 self.CELL_LINES_INPUT, self.TUMORS_INPUT)

		cell_lines_matrix = quantile_normalisation.quantile_normalize_separately(cell_lines_matrix)

		separate_values_matrix = mixtures.gather_separated_normalized_data(separate_values_matrix, cell_lines_matrix)

		separate_values_matrix = quantile_normalisation.algo(separate_values_matrix)

		mixtures.save_separate_matrix(np_gene_dictionary, separate_values_matrix, tumor_present, config.REFERENCE,
									  config.REFERENCE_TUMOR, self.CELL_LINES_INPUT, self.TUMORS_INPUT)

	def pure_cells(self):

		""" Generate a pure cell lines file (used for LLSR) using immune cell lines and tumor cell lines.
		"""

		np_gene_dictionary = {}
		tumor_present = False

		if args.TUMORS != None and len(args.TUMORS) > 0:
			tumor_present = True

		np_gene_dictionary = mixtures.get_relevant_information(np_gene_dictionary, tumor_present, args.CELL_LINES,
															   self.CELL_LINES_INPUT, args.TUMORS, self.TUMORS_INPUT)

		separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)

		cell_lines_matrix = mixtures.get_separated_for_normalization(separate_values_matrix, tumor_present,
																	 self.CELL_LINES_INPUT, self.TUMORS_INPUT)

		cell_lines_matrix = quantile_normalisation.quantile_normalize_separately(cell_lines_matrix)

		all_cell_lines_combined = mixtures.combine_separated_normalized_data(cell_lines_matrix, separate_values_matrix)

		mixtures.save_combined_matrix(np_gene_dictionary, all_cell_lines_combined, tumor_present, config.COMBINED_CELLS,
									  config.COMBINED_CELLS_TUMOR, self.CELL_LINES_INPUT, self.TUMORS_INPUT)

	def mixes(self):

		""" Generate a simulation file with spiked in tumor. This should be generated by using mixture
		files and tumor files.
		"""

		np_gene_dictionary = {}
		tumor_present = False

		if args.TUMORS != None and len(args.TUMORS) > 0:
			tumor_present = True

		np_gene_dictionary = mixtures.get_relevant_information(np_gene_dictionary, tumor_present, args.MIXTURES,
															   self.MIXTURES_INPUT, args.TUMORS, self.TUMORS_INPUT)

		separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)

		cell_lines_matrix = mixtures.get_separated_for_normalization(separate_values_matrix, tumor_present,
																	 self.MIXTURES_INPUT, self.TUMORS_INPUT)

		cell_lines_matrix = quantile_normalisation.quantile_normalize_separately(cell_lines_matrix)

		all_cell_lines_combined = mixtures.combine_separated_normalized_data(cell_lines_matrix, separate_values_matrix)

		np_gene_dictionary = mixtures.from_matrix_to_dictionary(all_cell_lines_combined, np_gene_dictionary)

		""" The data is then iterated over 0 to 100 percent tumor content with intervals
			of 5 percent. Each iteration is written to file.
		"""
		if tumor_present == False:
			file_handler.write_combined_mixtures(np_gene_dictionary, config.MIXTURE, self.MIXTURES_INPUT)
		else:

			if args.ITERATION == None or len(args.ITERATION) != 6:
				print("\n[ ERROR ] - You have not given 6 iteration numbers for tumor and noise, e.g.: -i 0 100 5 0 100 5\n")
				sys.exit(1)

			for tumor_content in range(int(args.ITERATION[0]), int(args.ITERATION[1]), int(args.ITERATION[2])):
				for noise_amount in range(int(args.ITERATION[3]), int(args.ITERATION[4]), int(args.ITERATION[5])):
					self.mixes_iteration(all_cell_lines_combined, tumor_content, noise_amount, np_gene_dictionary)

				print("--- Generated simulation file with " + str(tumor_content) + "% tumor content. " + str(
					int((int(args.ITERATION[1]) - tumor_content) / int(args.ITERATION[2]))) + " files remaining.")


	def mixes_iteration(self, all_cell_lines_combined, tumor_content, noise_amount, np_gene_dictionary):

		fixed_tumor_matrix = []

		for i in range(len(all_cell_lines_combined)):

			temp_list = []

			for k in range(len(all_cell_lines_combined[i]) - 1):
				temp_list.append((all_cell_lines_combined[i][k] * (1 - (tumor_content / 100))) +
								 all_cell_lines_combined[i][len(all_cell_lines_combined[i]) - 1] * (
									 tumor_content / 100))

			if noise_amount > 0:
				temp_list = noise.add_noise_controlled(temp_list, noise_amount)

			fixed_tumor_matrix.append(temp_list)

		np_gene_dictionary = mixtures.from_matrix_to_dictionary(fixed_tumor_matrix, np_gene_dictionary)

		file_handler.write_combined_mixtures_tumor(np_gene_dictionary, config.MIXTURES, tumor_content,
												   noise_amount, self.MIXTURES_INPUT)


args = parser.parse_args()
sim = Simulation()
sim.read_stdin()
sim.execute()
