
import readline
import sys
import numpy as np
import quantile_normalisation
import noise
import file_handler
import mixtures
import tumor
import copy
import argparse
import config

FLAGS = []
MIXTURES = []
MIXTURES_INPUT = []
TUMORS = []
TUMORS_INPUT = []
CELL_LINES = []
CELL_LINES_INPUT = []
ITERATION = []

parser = argparse.ArgumentParser()
parser.add_argument("-m", "--MIXTURES", help="Mixtures", nargs='*')
parser.add_argument("-t", "--TUMORS", help="Tumors", nargs='*')
parser.add_argument("-c", "--CELL_LINES", help="Cell lines", nargs='*')
parser.add_argument("-r", "--REFERENCE", help="Reference", nargs='*')
parser.add_argument("-i", "--ITERATION", help="Iteration", nargs='*')

args = parser.parse_args()


def read_stdin():

	""" Reads in from keyboard. This is needed to know which part of the input files that are
	supposed to be read by the program.
	"""

	print("")

	if args.MIXTURES != None and len(args.MIXTURES) > 0:

		print("*** MIXTURES ***")

		for i in range(len(args.MIXTURES)):

			no_mixtures = int(input("How many distinct mixtures in " + args.MIXTURES[i] + "? "))
			start = int(input("From which column does the first mixture begin (0 is first column)? "))
			stop = int(input("To which column does the last mixture end? "))
			replicates = int(input("Number of replicates per mixture (type 1 if only one mixture)? "))
			
			MIXTURES_INPUT.append([no_mixtures, start, stop, replicates])

	print("")

	if args.TUMORS != None and len(args.TUMORS) > 0:

		print("*** TUMORS ***")

		for i in range(len(args.TUMORS)):

			no_tumors = int(input("How many tumor cell lines in " + args.TUMORS[i] + "? "))
			start = int(input("From which column does the first tumor cell line begin (0 is first column)? "))
			stop = int(input("To which column does the last tumor cell line end? "))
			replicates = int(input("Number of replicates per tumor cell line (type 1 if only one cell line)? "))
			
			TUMORS_INPUT.append([no_tumors, start, stop, replicates])

	print("")

	if args.CELL_LINES != None and len(args.CELL_LINES) > 0:

		print("*** CELL LINES ***")

		for i in range(len(args.CELL_LINES)):

			no_cell_lines = int(input("How many cell lines in " + args.CELL_LINES[i] + "? "))
			start = int(input("From which column does the first cell line begin (0 is first column)? "))
			stop = int(input("To which column does the last cell line end? "))
			replicates = int(input("Number of replicates per cell line (type 1 if only one cell line)? "))
			
			CELL_LINES_INPUT.append([no_cell_lines, start, stop, replicates])

	print("")


def execute():

	""" This is the function that initiates the whole simulation. There are different possibilities
	for simulation:

	1. Generate a reference file (used for signature matrix in CIBERSORT) using immune cell lines
		and tumor cell lines.
	2. Generate a pure cell lines file (used for LLSR) using immune cell lines and tumor cell lines.
	3. Generate a simulation file with spiked in tumor. This should be generated by using mixture
		files and tumor files.
	"""

	if args.CELL_LINES != None and len(args.CELL_LINES) > 0:
		if args.REFERENCE != None and len(args.REFERENCE) > 0:
			reference()
		else:
			pure_cells()

	if args.MIXTURES != None and len(args.MIXTURES) > 0:
		mixes()
		# test()
	
	# test2()

def reference():

	""" Generate a reference file (used for signature matrix in CIBERSORT) using immune cell lines
	and tumor cell lines.
	"""

	np_gene_dictionary = {}
	tumor_present = False

	if args.TUMORS != None and len(args.TUMORS) > 0:
		tumor_present = True

	np_gene_dictionary = mixtures.get_relevant_information(np_gene_dictionary, tumor_present, args.CELL_LINES, CELL_LINES_INPUT, args.TUMORS, TUMORS_INPUT)

	separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)

	cell_lines_matrix = mixtures.get_separated_for_normalization(separate_values_matrix, tumor_present, CELL_LINES_INPUT, TUMORS_INPUT)

	cell_lines_matrix = quantile_normalisation.quantile_normalize_separately(cell_lines_matrix)

	separate_values_matrix = mixtures.gather_separated_normalized_data(separate_values_matrix, cell_lines_matrix)

	separate_values_matrix = quantile_normalisation.algo(separate_values_matrix)

	mixtures.save_separate_matrix(np_gene_dictionary, separate_values_matrix, tumor_present, config.REFERENCE, config.REFERENCE_TUMOR, CELL_LINES_INPUT, TUMORS_INPUT)


def pure_cells():

	""" Generate a pure cell lines file (used for LLSR) using immune cell lines and tumor cell lines.
	"""

	np_gene_dictionary = {}
	tumor_present = False

	if args.TUMORS != None and len(args.TUMORS) > 0:
		tumor_present = True

	np_gene_dictionary = mixtures.get_relevant_information(np_gene_dictionary, tumor_present, args.CELL_LINES, CELL_LINES_INPUT, args.TUMORS, TUMORS_INPUT)

	separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)

	cell_lines_matrix = mixtures.get_separated_for_normalization(separate_values_matrix, tumor_present, CELL_LINES_INPUT, TUMORS_INPUT)

	cell_lines_matrix = quantile_normalisation.quantile_normalize_separately(cell_lines_matrix)

	all_cell_lines_combined = mixtures.combine_separated_normalized_data(cell_lines_matrix, separate_values_matrix)

	mixtures.save_combined_matrix(np_gene_dictionary, all_cell_lines_combined, tumor_present, config.COMBINED_CELLS, config.COMBINED_CELLS_TUMOR, CELL_LINES_INPUT, TUMORS_INPUT)


def mixes():

	""" Generate a simulation file with spiked in tumor. This should be generated by using mixture
	files and tumor files.
	"""

	np_gene_dictionary = {}
	tumor_present = False

	if args.TUMORS != None and len(args.TUMORS) > 0:
		tumor_present = True

	np_gene_dictionary = mixtures.get_relevant_information(np_gene_dictionary, tumor_present, args.MIXTURES, MIXTURES_INPUT, args.TUMORS, TUMORS_INPUT)
	
	separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)

	cell_lines_matrix = mixtures.get_separated_for_normalization(separate_values_matrix, tumor_present, MIXTURES_INPUT, TUMORS_INPUT)
	
	""" Calculating the total mRNA in each mixture. Used later in Abbas algorithm.
	"""

	#file_handler.write_probe_values([MIXA, MIXB, MIXC, MIXD], ["MIX A", "MIX B", "MIX C", "MIX D"], "probe_values_mixtures")

	cell_lines_matrix = quantile_normalisation.quantile_normalize_separately(cell_lines_matrix)

	all_cell_lines_combined = mixtures.combine_separated_normalized_data(cell_lines_matrix, separate_values_matrix)

	np_gene_dictionary = mixtures.from_matrix_to_dictionary(all_cell_lines_combined, np_gene_dictionary)
	
	""" The data is then iterated over 0 to 100 percent tumor content with intervals
		of 5 percent. Each iteration is written to file.
	"""
	if tumor_present == False:

		file_handler.write_combined_mixtures(np_gene_dictionary, config.MIXTURE, MIXTURES_INPUT)
	else :

		start_tumor = int(args.ITERATION[0]); stop_tumor = int(args.ITERATION[1]); step_tumor = int(args.ITERATION[2])
		start_noise = int(args.ITERATION[3]); stop_noise = int(args.ITERATION[4]); step_noise = int(args.ITERATION[5])

		for tumor_content in range(start_tumor, stop_tumor, step_tumor):

			for noise_amount in range(start_noise, stop_noise, step_noise):

				fixed_tumor_matrix = []

				for i in range(len(all_cell_lines_combined)):

					temp_list = []

					for k in range(len(all_cell_lines_combined[i]) - 1):
						temp_list.append((all_cell_lines_combined[i][k] * (1-(tumor_content/100))) + all_cell_lines_combined[i][len(all_cell_lines_combined[i])-1] * (tumor_content/100))

					if noise_amount > 0:
						# temp_list = noise.add_noise_controlled(temp_list, noise_amount)
						temp_list = noise.add_log_noise_controlled(temp_list, noise_amount)

					fixed_tumor_matrix.append(temp_list)

				np_gene_dictionary = mixtures.from_matrix_to_dictionary(fixed_tumor_matrix, np_gene_dictionary)

				file_handler.write_combined_mixtures_tumor(np_gene_dictionary, config.MIXTURES, tumor_content, noise_amount, MIXTURES_INPUT)

			print("--- Generated simulation file with " + str(tumor_content) + "% tumor content. " + str(int((stop_tumor - tumor_content) / step_tumor)) + " files remaining.")


def test():

	""" Generate a simulation file with spiked in tumor. This should be generated by using mixture
	files and tumor files.
	"""

	np_gene_dictionary = {}
	tumor_present = False

	if args.TUMORS != None and len(args.TUMORS) > 0:
		tumor_present = True

	np_gene_dictionary = mixtures.get_relevant_information(np_gene_dictionary, tumor_present, args.MIXTURES, MIXTURES_INPUT, args.TUMORS, TUMORS_INPUT)
	
	separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)
	
	""" The data is then iterated over 0 to 100 percent tumor content with intervals
		of 5 percent. Each iteration is written to file.
	"""
	if tumor_present == False:

		file_handler.write_combined_mixtures(np_gene_dictionary, config.MIXTURE, MIXTURES_INPUT)
	else :

		start_tumor = int(args.ITERATION[0]); stop_tumor = int(args.ITERATION[1]); step_tumor = int(args.ITERATION[2])
		start_noise = int(args.ITERATION[3]); stop_noise = int(args.ITERATION[4]); step_noise = int(args.ITERATION[5])

		for tumor_content in range(start_tumor, stop_tumor, step_tumor):

			for noise_amount in range(start_noise, stop_noise, step_noise):

				noise_array = []

				for i in range(len(separate_values_matrix)):

					temp_array = []

					if noise_amount > 0:
						temp_array = noise.add_noise_controlled(separate_values_matrix[i], noise_amount)
					else:
						temp_array = separate_values_matrix[i]

					noise_array.append(temp_array)

				cell_lines_matrix = mixtures.get_separated_for_normalization(noise_array, tumor_present, MIXTURES_INPUT, TUMORS_INPUT)
	
				""" Calculating the total mRNA in each mixture. Used later in Abbas algorithm.
				"""

				cell_lines_matrix = quantile_normalisation.quantile_normalize_separately(cell_lines_matrix)

				all_cell_lines_combined = mixtures.combine_separated_normalized_data(cell_lines_matrix, noise_array)
				
				np_gene_dictionary = mixtures.from_matrix_to_dictionary(all_cell_lines_combined, np_gene_dictionary)

				fixed_tumor_matrix = []

				for i in range(len(all_cell_lines_combined)):

					temp_list = []

					for k in range(len(all_cell_lines_combined[i]) - 1):
						temp_list.append((all_cell_lines_combined[i][k] * (1-(tumor_content/100))) + all_cell_lines_combined[i][len(all_cell_lines_combined[i])-1] * (tumor_content/100))

					fixed_tumor_matrix.append(temp_list)

				np_gene_dictionary = mixtures.from_matrix_to_dictionary(fixed_tumor_matrix, np_gene_dictionary)

				file_handler.write_combined_mixtures_tumor(np_gene_dictionary, config.MIXTURES, tumor_content, noise_amount, MIXTURES_INPUT)

			print("--- Generated simulation file with " + str(tumor_content) + "% tumor content. " + str(int((stop_tumor - tumor_content) / step_tumor)) + " files remaining.")


def test2():

	mix = open('../../../Master_files/external/GSE11103-GSE10650.Abbasmixtures_HCT116.mas5.txt', 'r')
	genes = []; normalize = []
	
	MA1 = 1; MA2 = 2; MA3 = 3
	MB1 = 4; MB2 = 5; MB3 = 6
	MC1 = 7; MC2 = 8; MC3 = 9
	MD1 = 10; MD2 = 11; MD3 = 12
	T = 13

	header = True

	for line in mix:

		if header == True:
			header = False
			continue

		splitted_line = line.split('\t')
		genes.append(splitted_line[0].replace("\"", ""))
		normalize.append([float(splitted_line[MA1]), float(splitted_line[MA2]), float(splitted_line[MA3]), float(splitted_line[MB1]), float(splitted_line[MB2]), float(splitted_line[MB3]), float(splitted_line[MC1]), float(splitted_line[MC2]), float(splitted_line[MC3]), float(splitted_line[MD1]), float(splitted_line[MD2]), float(splitted_line[MD3]), float(splitted_line[T])])

	np_n = np.zeros((len(normalize), 13))

	for i in range(len(normalize)):

		np_n[i] = normalize[i]

	np_normalized = quantile_normalisation.algo(np_n)

	normalized_list = []

	for i in range(len(np_normalized)):

		normalized_list.append([(np_normalized[i][0] + np_normalized[i][1] + np_normalized[i][2]) / 3.0, (np_normalized[i][3] + np_normalized[i][4] + np_normalized[i][5]) / 3.0, (np_normalized[i][6] + np_normalized[i][7] + np_normalized[i][8]) / 3.0, (np_normalized[i][9] + np_normalized[i][10] + np_normalized[i][11]) / 3.0, np_normalized[i][12]])
	# print(normalized_list[0])
	for tumor_content in range(0, 100, 5):

		for noise_amount in range(0, 100, 5):

			noise_array = []

			for i in range(len(normalized_list)):

				temp_array = []

				if noise_amount > 0:
					temp_array = noise.add_noise_controlled(normalized_list[i], noise_amount)
				else:
					temp_array = normalized_list[i]

				noise_array.append(temp_array)

			fixed_tumor_matrix = []

			for i in range(len(noise_array)):

				temp_list = []

				for k in range(len(noise_array[i]) - 1): 

					temp_list.append((noise_array[i][k] * (1-(tumor_content/100))) + (noise_array[i][4] * (tumor_content/100)))

				fixed_tumor_matrix.append(temp_list)
			# print(fixed_tumor_matrix[0])
			# sys.exit(1)

			mixes = open('../../../Master_files/simulation/mixtures_newman_replication_tumor_' + str(tumor_content) + '_' + str(noise_amount), 'w')

			mixes.write("Probes\tMIX_A\tMIX_B\tMIX_C\tMIX_D\n")

			for line in range(len(fixed_tumor_matrix)):

				mixes.write(genes[line] + '\t' + str(fixed_tumor_matrix[line][0]) + '\t' + str(fixed_tumor_matrix[line][1]) + '\t' + str(fixed_tumor_matrix[line][2]) + '\t' + str(fixed_tumor_matrix[line][3]) + '\n')

			mixes.close()

			print("--- Generated simulation file with " + str(tumor_content) + "% tumor content.")


read_stdin()
execute()