
import readline, sys, numpy as np, quantile_normalisation, noise, file_handler, mixtures, tumor, copy, argparse, config

FLAGS = []
MIXTURES = []
MIXTURES_INPUT = []
TUMORS = []
TUMORS_INPUT = []
CELL_LINES = []
CELL_LINES_INPUT = []
ITERATION = []
# OUTPUT = "../../../Master_files/simulation/"

parser = argparse.ArgumentParser()
parser.add_argument("-m", "--MIXTURES", help="Mixtures", nargs='*')
parser.add_argument("-t", "--TUMORS", help="Tumors", nargs='*')
parser.add_argument("-c", "--CELL_LINES", help="Cell lines", nargs='*')
parser.add_argument("-r", "--REFERENCE", help="Reference", nargs='*')
#parser.add_argument("-o", "--OUTPUT", help="Output")
parser.add_argument("-i", "--ITERATION", help="Iteration", nargs='*')

args = parser.parse_args()


def read_stdin():

	""" Reads in from keyboard. This is needed to know which part of the input files that are
	supposed to be read by the program.
	"""

	print("")

	if args.MIXTURES != None and len(args.MIXTURES) > 0:

		print("*** MIXTURES ***")

		for i in range(len(args.MIXTURES)):

			no_mixtures = int(input("How many distinct mixtures in " + args.MIXTURES[i] + "? "))
			start = int(input("From which column does the first mixture begin (0 is first column)? "))
			stop = int(input("To which column does the last mixture end? "))
			replicates = int(input("Number of replicates per mixture (type 1 if only one mixture)? "))
			
			MIXTURES_INPUT.append([no_mixtures, start, stop, replicates])

	print("")

	if args.TUMORS != None and len(args.TUMORS) > 0:

		print("*** TUMORS ***")

		for i in range(len(args.TUMORS)):

			no_tumors = int(input("How many tumor cell lines in " + args.TUMORS[i] + "? "))
			start = int(input("From which column does the first tumor cell line begin (0 is first column)? "))
			stop = int(input("To which column does the last tumor cell line end? "))
			replicates = int(input("Number of replicates per tumor cell line (type 1 if only one cell line)? "))
			
			TUMORS_INPUT.append([no_tumors, start, stop, replicates])

	print("")

	if args.CELL_LINES != None and len(args.CELL_LINES) > 0:

		print("*** CELL LINES ***")

		for i in range(len(args.CELL_LINES)):

			no_cell_lines = int(input("How many cell lines in " + args.CELL_LINES[i] + "? "))
			start = int(input("From which column does the first cell line begin (0 is first column)? "))
			stop = int(input("To which column does the last cell line end? "))
			replicates = int(input("Number of replicates per cell line (type 1 if only one cell line)? "))
			
			CELL_LINES_INPUT.append([no_cell_lines, start, stop, replicates])

	print("")


def execute():

	""" This is the function that initiates the whole simulation. There are different possibilities
	for simulation:

	1. Generate a reference file (used for signature matrix in CIBERSORT) using immune cell lines
		and tumor cell lines.
	2. Generate a simulation file with spiked in tumor. This should be generated by using mixture
		files and tumor files.
	3. ???
	"""

	np_gene_dictionary = {}

	if args.CELL_LINES != None and len(args.CELL_LINES) > 0:

		if args.REFERENCE != None and len(args.REFERENCE) > 0:

			tumor_present = False

			if args.TUMORS != None and len(args.TUMORS) > 0:
				tumor_present = True

			""" Iterate through all the input files and every relevant cell line in that file.
			"""
			for i in range(len(args.CELL_LINES)):
				np_gene_dictionary = mixtures.all_separate_mixtures(args.CELL_LINES[i], np_gene_dictionary, CELL_LINES_INPUT[i])

			if tumor_present == True:
				for i in range(len(args.TUMORS)):
					np_gene_dictionary = mixtures.all_separate_mixtures(args.TUMORS[i], np_gene_dictionary, TUMORS_INPUT[i])

			separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)

			""" For quantile normalization, each unique cell line must be normalized separately. Need first to initialize a matrix for each cell line.
			"""
			cell_lines_matrix = [];
			
			for i in range(len(CELL_LINES_INPUT)):
				for j in range(CELL_LINES_INPUT[i][0]):
					cell_lines_matrix.append([])

			if tumor_present == True:
				cell_lines_matrix.append([])

			if tumor_present == True:
				cell_lines_matrix = mixtures.separate_for_normalization(separate_values_matrix, cell_lines_matrix, CELL_LINES_INPUT, tumor_present, TUMORS_INPUT)
			else:
				cell_lines_matrix = mixtures.separate_for_normalization(separate_values_matrix, cell_lines_matrix, CELL_LINES_INPUT, tumor_present, None)
			
			""" Quantile normalize every cell line separately.
			"""
			np_cell_lines_matrix = []

			for i in range(len(cell_lines_matrix)):
				
				np_cell_lines_matrix.append([])
				np_cell_lines_matrix[i] = np.zeros(shape=(len(cell_lines_matrix[i]), len(cell_lines_matrix[i][0])))
				
				for j in range(len(cell_lines_matrix[i])):
					np_cell_lines_matrix[i][j] = cell_lines_matrix[i][j]

			for i in range(len(cell_lines_matrix)):
				cell_lines_matrix[i] = quantile_normalisation.algo(np_cell_lines_matrix[i])
			
			""" Gather all the normalized gene values (from each cell line) back together to a matrix containing everyone.
			"""
			for i in range(len(separate_values_matrix)):

				all_cell_lines = []

				for cell_line in range(len(cell_lines_matrix)):

					for replicate in range(len(cell_lines_matrix[cell_line][i])):

						all_cell_lines.append(cell_lines_matrix[cell_line][i][replicate])

				separate_values_matrix[i] = all_cell_lines

			""" Save the matrix to file.
			"""
			np_gene_dictionary = mixtures.from_matrix_to_dictionary(separate_values_matrix, np_gene_dictionary)
			
			if tumor_present == False:
				file_handler.write_separate_cell_lines(np_gene_dictionary, config.REFERENCE, CELL_LINES_INPUT, [])
			else:
				file_handler.write_separate_cell_lines(np_gene_dictionary, config.REFERENCE_TUMOR, CELL_LINES_INPUT, TUMORS_INPUT)

		else:

			tumor_present = False

			if args.TUMORS != None and len(args.TUMORS) > 0:
				tumor_present = True

			""" Iterate through all the input files and every relevant cell line in that file.
			"""
			for i in range(len(args.CELL_LINES)):
				np_gene_dictionary = mixtures.all_separate_mixtures(args.CELL_LINES[i], np_gene_dictionary, CELL_LINES_INPUT[i])

			if tumor_present == True:
				for i in range(len(args.TUMORS)):
					np_gene_dictionary = mixtures.all_separate_mixtures(args.TUMORS[i], np_gene_dictionary, TUMORS_INPUT[i])

			separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)

			""" For quantile normalization, each unique cell line must be normalized separately. Need first to initialize a matrix for each cell line.
			"""
			cell_lines_matrix = [];
			
			for i in range(len(CELL_LINES_INPUT)):
				for j in range(CELL_LINES_INPUT[i][0]):
					cell_lines_matrix.append([])

			if tumor_present == True:
				cell_lines_matrix.append([])

			if tumor_present == True:
				cell_lines_matrix = mixtures.separate_for_normalization(separate_values_matrix, cell_lines_matrix, CELL_LINES_INPUT, tumor_present, TUMORS_INPUT)
			else:
				cell_lines_matrix = mixtures.separate_for_normalization(separate_values_matrix, cell_lines_matrix, CELL_LINES_INPUT, tumor_present, None)
			
			""" Quantile normalize every cell line separately.
			"""
			np_cell_lines_matrix = []

			for i in range(len(cell_lines_matrix)):

				np_cell_lines_matrix.append([])
				np_cell_lines_matrix[i] = np.zeros(shape=(len(cell_lines_matrix[i]), len(cell_lines_matrix[i][0])))
				
				for j in range(len(cell_lines_matrix[i])):
					np_cell_lines_matrix[i][j] = cell_lines_matrix[i][j]

			for i in range(len(cell_lines_matrix)):
				cell_lines_matrix[i] = quantile_normalisation.algo(np_cell_lines_matrix[i])
			
			""" Gather all the normalized gene values (from each cell line) back together to a matrix containing everyone.
			Calculate the average score of each cell line.
			"""
			all_cell_lines_combined = np.zeros(shape=(len(cell_lines_matrix[0]), len(cell_lines_matrix)))
			
			for i in range(len(separate_values_matrix)):

				for cell_line in range(len(cell_lines_matrix)):

					avg = 0.0

					for replicate in range(len(cell_lines_matrix[cell_line][i])):

						avg += cell_lines_matrix[cell_line][i][replicate]

					all_cell_lines_combined[i][cell_line] = avg / float(len(cell_lines_matrix[cell_line][i]))

			""" Quantile normalize the whole matrix.
			"""
			all_cell_lines_combined = quantile_normalisation.algo(all_cell_lines_combined)

			""" Save the matrix to file.
			"""
			np_gene_dictionary = mixtures.from_matrix_to_dictionary(all_cell_lines_combined, np_gene_dictionary)
			
			if tumor_present == False:
				file_handler.write_combined_cell_lines(np_gene_dictionary, config.COMBINED_CELLS, CELL_LINES_INPUT)
			else:
				file_handler.write_combined_cell_lines_tumor(np_gene_dictionary, config.COMBINED_CELLS_TUMOR, CELL_LINES_INPUT, TUMORS_INPUT)


	if args.MIXTURES != None and len(args.MIXTURES) > 0:

		tumor_present = False

		if args.TUMORS != None and len(args.TUMORS) > 0:
			tumor_present = True

		""" Iterate through all the input files and every relevant cell line in that file.
		"""
		for i in range(len(args.MIXTURES)):
			np_gene_dictionary = mixtures.all_separate_mixtures(args.MIXTURES[i], np_gene_dictionary, MIXTURES_INPUT[i])

		if tumor_present == True:
			for i in range(len(args.TUMORS)):
				np_gene_dictionary = mixtures.all_separate_mixtures(args.TUMORS[i], np_gene_dictionary, TUMORS_INPUT[i])
		
		separate_values_matrix = mixtures.from_dictionary_to_matrix(np_gene_dictionary)
		
		""" For quantile normalization, each unique cell line must be normalized separately. Need first to initialize a matrix for each cell line.
		"""
		cell_lines_matrix = [];
		
		for i in range(len(MIXTURES_INPUT)):
			for j in range(MIXTURES_INPUT[i][0]):
				cell_lines_matrix.append([])

		if tumor_present == True:
			cell_lines_matrix.append([])

		if tumor_present == True:
			cell_lines_matrix = mixtures.separate_for_normalization(separate_values_matrix, cell_lines_matrix, MIXTURES_INPUT, tumor_present, TUMORS_INPUT)
		else:
			cell_lines_matrix = mixtures.separate_for_normalization(separate_values_matrix, cell_lines_matrix, MIXTURES_INPUT, tumor_present, None)
		
		""" Calculating the total mRNA in each mixture. Used later in Abbas algorithm.
		"""

		#file_handler.write_probe_values([MIXA, MIXB, MIXC, MIXD], ["MIX A", "MIX B", "MIX C", "MIX D"], "probe_values_mixtures")

		""" Quantile normalize every cell line separately.
		"""
		np_cell_lines_matrix = []

		for i in range(len(cell_lines_matrix)):

			np_cell_lines_matrix.append([])
			np_cell_lines_matrix[i] = np.zeros(shape=(len(cell_lines_matrix[i]), len(cell_lines_matrix[i][0])))
			
			for j in range(len(cell_lines_matrix[i])):
				np_cell_lines_matrix[i][j] = cell_lines_matrix[i][j]

		for i in range(len(cell_lines_matrix)):
			cell_lines_matrix[i] = quantile_normalisation.algo(np_cell_lines_matrix[i])

		""" Gather all the normalized gene values (from each cell line) back together to a matrix containing everyone.
		"""
		all_cell_lines_combined = np.zeros(shape=(len(cell_lines_matrix[0]), len(cell_lines_matrix)))
		
		for i in range(len(separate_values_matrix)):

			for cell_line in range(len(cell_lines_matrix)):

				avg = 0.0

				for replicate in range(len(cell_lines_matrix[cell_line][i])):

					avg += cell_lines_matrix[cell_line][i][replicate]

				all_cell_lines_combined[i][cell_line] = avg / float(len(cell_lines_matrix[cell_line][i]))

		""" Quantile normalize the whole matrix.
		"""
		all_cell_lines_combined = quantile_normalisation.algo(all_cell_lines_combined)

		np_gene_dictionary = mixtures.from_matrix_to_dictionary(all_cell_lines_combined, np_gene_dictionary)
		
		""" The data is then iterated over 0 to 100 percent tumor content with intervals
			of 5 percent. Each iteration is written to file.
		"""
		if tumor_present == False:

			file_handler.write_combined_mixtures(np_gene_dictionary, config.MIXTURE, MIXTURES_INPUT)
		else :

			start_tumor = int(args.ITERATION[0]); stop_tumor = int(args.ITERATION[1]); step_tumor = int(args.ITERATION[2])
			start_noise = int(args.ITERATION[3]); stop_noise = int(args.ITERATION[4]); step_noise = int(args.ITERATION[5])

			for tumor_content in range(start_tumor, stop_tumor, step_tumor):

				for noise_amount in range(start_noise, stop_noise, step_noise):

					fixed_tumor_matrix = []

					for i in range(len(all_cell_lines_combined)):

						temp_list = []

						for k in range(len(all_cell_lines_combined[i]) - 1):
							temp_list.append((all_cell_lines_combined[i][k] * (1-(tumor_content/100))) + all_cell_lines_combined[i][len(all_cell_lines_combined[i])-1] * (tumor_content/100))

						if noise_amount > 0:
							temp_list = noise.add_noise_controlled(temp_list, noise_amount)

						fixed_tumor_matrix.append(temp_list)

					np_gene_dictionary = mixtures.from_matrix_to_dictionary(fixed_tumor_matrix, np_gene_dictionary)

					file_handler.write_combined_mixtures_tumor(np_gene_dictionary, config.MIXTURES, tumor_content, noise_amount, MIXTURES_INPUT)

				print("--- Generated simulation file with " + str(tumor_content) + "% tumor content. " + str(int((stop_tumor - tumor_content) / step_tumor)) + " files remaining.")


read_stdin();
execute();